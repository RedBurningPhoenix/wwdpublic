using System.Numerics;
using Content.Client.Construction;
using Content.Client.UserInterface.Controls;
using Content.Shared._White.InhandCrafting;
using Content.Shared.Construction.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Placement;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;

namespace Content.Client._White.InhandCrafting.UI;

[GenerateTypedNameReferences]
public sealed partial class InhandCraftMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly IPlacementManager _placementManager = default!;

    private readonly ConstructionSystem _construction;

    public InhandCraftMenu(EntityUid owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _construction = _entManager.System<ConstructionSystem>();

        if (!_entManager.TryGetComponent<InhandCraftingComponent>(owner, out var crafting))
            return;

        var spriteSystem = _entManager.System<SpriteSystem>();
        var main = FindControl<RadialContainer>("Main");

        foreach (var protoId in crafting.Prototypes)
        {
            if (!_protoManager.TryIndex(protoId, out var proto))
                continue;

            var button = new RadialMenuTextureButton
            {
                ToolTip = Loc.GetString(proto.Name),
                TextureNormal = spriteSystem.Frame0(proto.Icon),
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(48f, 48f),
            };

            button.OnButtonUp += _ =>
            {
                BuildItem(proto);
                Close();
            };

            main.AddChild(button);
        }
    }

    private void BuildItem(ConstructionPrototype prototype)
    {
        if (prototype.Type == ConstructionType.Item)
        {
            _construction.TryStartItemConstruction(prototype.ID);
            return;
        }

        _placementManager.BeginPlacing(new PlacementInformation
        {
            IsTile = false,
            PlacementOption = prototype.PlacementMode
        }, new ConstructionPlacementHijack(_construction, prototype));
    }
}
